/* Copyright Airship and Contributors */

#import <Foundation/Foundation.h>
#import "UAAPIClient.h"
#import "UAPreferenceDataStore+Internal.h"
#import "UARemoteDataPayload+Internal.h"
#import "UARequestSession.h"
#import "UALocaleManager.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * Represents possible remote data API client errors.
 */
typedef NS_ENUM(NSInteger, UARemoteDataAPIClientError) {
    /**
     * Indicates an unsuccessful client status.
     */
    UARemoteDataAPIClientErrorUnsuccessfulStatus,

    /**
     * Indicates an invalid server response.
     */
    UARemoteDataAPIClientErrorInvalidResponse
};

/**
 * The domain for NSErrors generated by the remote data client.
 */
extern NSString * const UARemoteDataAPIClientErrorDomain;

@interface UARemoteDataAPIClient : UAAPIClient

///---------------------------------------------------------------------------------------
/// @name Internal Methods
///---------------------------------------------------------------------------------------

/**
 * Create the remote data API client.
 *
 * @param config The Airship config.
 * @param dataStore A UAPreferenceDataStore to store persistent preferences
 * @param localeManager A UALocaleManager.
 * @return The remote data API client instance.
 */
+ (UARemoteDataAPIClient *)clientWithConfig:(UARuntimeConfig *)config dataStore:(UAPreferenceDataStore *)dataStore localeManager:(UALocaleManager *)localeManager;


/**
 * Create the remote data API client. Used for testing.
 *
 * @param config The Airship config.
 * @param dataStore A UAPreferenceDataStore to store persistent preferences
 * @param session The UARequestSession session.
 * @param localeManager A UALocaleManager.
 * @return The remote data API client instance.
 */
+ (UARemoteDataAPIClient *)clientWithConfig:(UARuntimeConfig *)config
                                  dataStore:(UAPreferenceDataStore *)dataStore
                                    session:(UARequestSession *)session
                              localeManager:(UALocaleManager *)localeManager;

/**
 * Refresh the remote data by calling the remote data cloud API.
 *
 * @param completionHandler The completion handler.
 * @return A UADisposable token which can be used to cancel completion handler execution.
 *
 * Note: one block and only one block will be called.
 */
- (UADisposable *)fetchRemoteData:(void (^)(NSArray<NSDictionary *> * _Nullable remoteData, NSError * _Nullable error))completionHandler;

/**
 * Clears the last modified time for message list requests.
 */
- (void)clearLastModifiedTime;

@end

NS_ASSUME_NONNULL_END
